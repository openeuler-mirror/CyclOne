

package com.idcos.enterprise.portal.dal.repository;

// auto generated imports

import com.idcos.cloud.core.dal.common.jpa.BaseRepository;
import com.idcos.enterprise.portal.dal.entity.PortalUserGroup;
import org.springframework.data.jpa.repository.Query;

import java.util.List;
import java.util.Map;

/**
 * 自动生成PortalUserGroupRepository
 * <p>
 * 数据库配置文件自动生成,此文件属于自动生成的,具体可以参考codegen工程
 * Generated by <tt>jap-codgen</tt> on 2015-09-15 09:22:12.
 *
 * @author yanlv
 * @version PortalUserGroupRepository.java, v 1.1 2015-09-15 09:22:12 yanlv Exp $
 */
public interface PortalUserGroupRepository extends BaseRepository<PortalUserGroup, String> {
    /**
     * findByName
     *
     * @param groupName
     * @return
     */
    @Query("select ug from PortalUserGroup ug where ug.isActive='Y' and ug.name=?1")
    List<PortalUserGroup> findByName(String groupName);

    /**
     * 根据用户组名和租户名查询用户组
     *
     * @param groupName
     * @param tenant
     * @return
     */
    @Query("select ug from PortalUserGroup ug where ug.isActive='Y' and ug.name=?1 and ug.tenant=?2")
    List<PortalUserGroup> findByNameAndTenant(String groupName, String tenant);

    /**
     * <p>
     * The jql statement for this operation is <br>
     * <tt>select g from PortalUserGroup g where g.isActive='Y' order by g.name</tt>
     *
     * @param tenant
     * @return List<PortalUserGroup>
     */
    @Query("select g from PortalUserGroup g where g.isActive='Y' and tenant=?1 order by g.name")
    List<PortalUserGroup> queryUserGroupList(String tenant);

    /**
     * findGroupPageByUserIdAndCnd
     *
     * @param userId
     * @param cnd
     * @return
     */
    @Query("select u from PortalUserGroup u,PortalGroupUserRel r where u.id=r.groupId and r.userId =?1 and u.isActive='Y' and (u.name like ?2 or u.remark like ?2)")
    List<PortalUserGroup> findGroupPageByUserIdAndCnd(String userId, String cnd);

    /**
     * findGroupPageByRoleIdAndCnd
     *
     * @param roleId
     * @param cnd
     * @return
     */
    @Query("select u from PortalUserGroup u,PortalGroupRoleRel r where u.id=r.groupId and r.roleId =?1 and u.isActive='Y' and (u.name like ?2 or u.remark like ?2)")
    List<PortalUserGroup> findGroupPageByRoleIdAndCnd(String roleId, String cnd);

    /**
     * findAllUserGroupByTenantId
     *
     * @param tenantId
     * @return
     */
    @Query("select u from PortalUserGroup u where u.isActive='Y' and u.tenant = ?1")
    List<PortalUserGroup> findAllUserGroupByTenantId(String tenantId);

    /**
     * getUserGroupIdsByPermissionCode
     *
     * @param code
     * @return
     */
    @Query(value = "SELECT DISTINCT r.group_id as userGroupId FROM PORTAL_GROUP_ROLE_REL r WHERE r.role_id IN (SELECT p.auth_obj_id FROM PORTAL_PERMISSION p WHERE p.auth_res_id = ?1)", nativeQuery = true)
    List<String> getUserGroupIdsByPermissionCode(String code);

    /**
     * findUserGroupByUserGroupIdAndIsActive
     *
     * @param userGroupId
     * @param isActive
     * @return
     */
    @Query("SELECT u FROM PortalUserGroup u WHERE u.id= ?1 and u.isActive=?2")
    PortalUserGroup findUserGroupByUserGroupIdAndIsActive(String userGroupId, String isActive);

    /**
     * findUserGroupByType
     *
     * @param type
     * @return
     */
    @Query("select u from PortalUserGroup u where u.type = ?1 and u.tenant='default' and u.isActive='Y'")
    List<PortalUserGroup> findUserGroupByType(String type);

    /**
     * findUserGroupByTypeAndTenantId
     *
     * @param type
     * @param tenantId
     * @return
     */
    @Query("select u from PortalUserGroup u where u.type = ?1 and u.tenant=?2 and u.isActive='Y'")
    List<PortalUserGroup> findUserGroupByTypeAndTenantId(String type, String tenantId);

}